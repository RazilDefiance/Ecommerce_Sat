|| ----------------------------------------------------------------------------------------------
DataBase Context
"ConnectionStrings": {"DefaultConnection": "Server=(localdb)\\MSSQLLocalDB;Database=ECommerce;Trusted_Connection=True;MultipleActiveResultSets=true" } 

|| ----------------------------------------------------------------------------------------------
Program.cs
builder.Services.AddRazorPages().AddRazorRuntimeCompilation();

|| ----------------------------------------------------------------------------------------------
DataTables StyleSheet
URL INFO: https://cdn.datatables.net/

-- Add on Top Index
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css" />

-- Add between table tag
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
            </div>
            <div class="panel-body">
                <table class="table table-hover table-responsive table-striped" id="CountryTable">
                .
                .
                <Yor Code Table> 
                .
                .
              </div>
        </div>
    </div>
</div>
                
                

-- Add Section on bottom
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="//cdn.datatables.net/1.13.3/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#CountryTable').DataTable({
                "language": {
                    "url": "//cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/Spanish.json"
                },
                "aLengthMenu": [
                    [5, 25, 50, 100, 200, -1],
                    [5, 25, 50, 100, 200, "Todos"]
                ]
            });
        });
    </script>
}


|| ----------------------------------------------------------------------------------------------
Packets
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Tools
Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation

|| ----------------------------------------------------------------------------------------------
Cmdlets Nuget
add-migration name
update-database

|| ----------------------------------------------------------------------------------------------
Code Bootstrap
class="btn btn-outline-primary"


|| ----------------------------------------------------------------------------------------------
//////////// HTTP POST - CREATE ACTION
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create(Country country)
{
    if (ModelState.IsValid)
    {
        _context.Add(country);
        try
        {
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));

        }
        catch (DbUpdateException dbUpdateException)
        {
            if (dbUpdateException.InnerException.Message.Contains("duplicate"))
            {
                ModelState.AddModelError(string.Empty, "Ya existe un país con el mismo nombre.");
            }
            else
            {
                ModelState.AddModelError(string.Empty, dbUpdateException.InnerException.Message);
            }
        }
        catch (Exception exception)
        {
            ModelState.AddModelError(string.Empty, exception.Message);
        }
    }
    return View(country);
}


//////////// HTTP POST - EDIT ACTION
        // POST: Countries/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(Guid id, Country country)
        {
            if (id != country.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(country);
                    await _context.SaveChangesAsync();
                    return RedirectToAction(nameof(Index));
                }
                catch (DbUpdateException dbUpdateException)
                {
                    if (dbUpdateException.InnerException.Message.Contains("duplicate"))
                    {
                        ModelState.AddModelError(string.Empty, "Ya existe un país con el mismo nombre.");
                    }
                    else
                    {
                        ModelState.AddModelError(string.Empty, dbUpdateException.InnerException.Message);
                    }
                }
                catch (Exception exception)
                {
                    ModelState.AddModelError(string.Empty, exception.Message);
                }
            }
            return View(country);
        }

